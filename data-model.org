#+TITLE: Feedback Portal 2.0 Data Model
#+AUTHOR: VLEAD
#+DATE: [2016-08-29 Mon]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction
  The application or the system is abstracted as the data model.  The model
  captures: the entities that comprise the system; relations and constraints
  between these entities; and operations that entail a change in the state of
  the system.

  The purpose of this document is to describe the expected behaviour of the new
  outreach portal. It is a specification for the new requirements of this portal.


* Notation
  The system is defined as the data model.  There is a certain notation that is
  used for defining the data model. 

** Sets, cardinality and relations

If =A= is a set, then
    1. =A!= denotes exactly one element of =A=.
    2. =A?= denotes at most one element of =A=.
    3. =A+= denotes  one or more elements of =A=
    4. =A*=  denotes at zero or more elements of =A=.  Often
       abbreviated as =A=.

    5. =A > B= denotes a relation /from/ =A= /to/ =B=.

** Relations and their cardinality type

A relation =r:A > B= could relate each element of =A= to
zero, one or more elements of =B=.

|--------------------------------+-----------|
| Cardinality of B               | Notation  |
|--------------------------------+-----------|
| at least zero elements of =B=. | r: A > B  |
|--------------------------------+-----------|
| at most one element of =B=     | r: A > B? |
|--------------------------------+-----------|
| at least one element of =B=    | r: A > B+ |
|--------------------------------+-----------|
| exactly one element of =B=     | r: A > B! |
|--------------------------------+-----------|
   

* Abstract Entity Types
  The following are the abstract data types in our system. 
** Feedback
:PROPERTIES:
:CUSTOM_ID: entity_user
:END: 
  Requirement satisfied: [[../requirements/index.org::#req_user][Feedback]]

#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Feedback
#+END_SRC

** Question
:PROPERTIES:
:CUSTOM_ID: entity_name
:END: 
  Requirement satisfied: [[../requirements/index.org::#req_user_name][Question]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Question
#+END_SRC
** Answer
:PROPERTIES:
:CUSTOM_ID: entity_email
:END: 
  Requirement satisfied: [[../requirements/index.org::#req_user_identification][Answer]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Answer
#+END_SRC

** Response
:PROPERTIES:
:CUSTOM_ID: entity_role
:END: 
  Requirement satisfied: [[../requirements/index.org::#req_role][Response]]
#+BEGIN_SRC spec :tangle spec.txt
;;; Entity Types
TYPE Response 
#+END_SRC

* Relations and cardinality constraints over entity types 
  :PROPERTIES:
  :CUSTOM_ID: cardinal_constraints
  :END: 
  The constraints are defined both in terms of formal notation and also in
  diagrams for visual clarity. 

** Formal Notation
For each relation, we define its inverse next to it.
#+BEGIN_SRC spec :tangle spec.txt

;;; Relations with cardinality constraints

[feedback, response]   : Feedback !  >    Response *
[response, question]   : Response !  >    Question !
[response, answer]     : Response !  >    Answer +

#+END_SRC


** Diagrams
   The following diagrams summarizes all the cardinality constraints across all
   entities.

*** Relationships of Feedback
    This diagrams depicts the relationships between User, Role, Session, Email
    and Name entities
#+BEGIN_HTML
<img src="https://docs.google.com/drawings/d/1k3AovJg7GJe65MI_LAJA_3RdMsmlP9eTC8wLBbmfwdY/pub?w=960&h=720">
<p align="center"> Feedback Relations </p>

#+END_HTML
  To edit the feedback relations image click [[https://docs.google.com/drawings/d/1k3AovJg7GJe65MI_LAJA_3RdMsmlP9eTC8wLBbmfwdY/edit][here]]


* Keys

An entity =K= is called a /key for/ an entity =A= if there
is a relation =r: A? > K!=.

|-----+-----------+------------------------------|
|     | Entity    | Key                          |
|-----+-----------+------------------------------|
|  1. | Feedback  | ip address                   |
|-----+-----------+------------------------------|
|  2. | Response  |                              |
|-----+-----------+------------------------------|
|  3. | Question  |                              |
|-----+-----------+------------------------------|
|  4. | Answer    |                              |
|-----+-----------+------------------------------|


* Assumptions

1) IP Address 

* System state
  The system's state is captured by a set of /state variables/.

** Primary Entity sets
:PROPERTIES:
:CUSTOM_ID: primary_entity_sets
:END:    


#+BEGIN_SRC spec :tangle spec.txt

;;; Primary state variables

Sets
 question-set  : set[Question]  ; set of questions in the system
 answer-set    : set[Answer]    ; set of answers in the system
 feedback-set  : set[Feedback]  ; set of all feedbacks in the system
 response-set  : set[Response]  ; set of all Question & Answer Responses in the system

 #+END_SRC

** Derived Entity sets
:PROPERTIES:
:CUSTOM_ID: derived_entity_sets
:END: 

#+BEGIN_SRC spec :tangle spec.txt
  
  workshop-usage-set : feedback-set.gate_way_ip and feedback-set.date  ; set of all feedbacks of a workshop 
  nc-usage-set       : feedback-set.gate_way_ip ; set of all feedbacks of a nodal centre 
  lab-usage-set      : feedback-set.lab_id ; set of all feedbacks of a lab 
  exp-usage-set      : feedback-set.exp_id ; set of all feedbacks of a experiment 
  dis-usage-set      : feedback-set.dis_id ; set of all feedbacks of a discipline

#+END_SRC

* Operations 

CRUD operations.  

Each operation is performed on an entity instance or an
entity-set.   The operation may take additional parameters.
It also takes as a  parameter of the credentials of the
actor performing the operation.

 - C  create a user      
 - R  read from a user   
 - U  update a user      
 - D  delete a user      



