#+TITLE: Persistent Entities
#+AUTHOR: VLEAD
#+DATE: [2016-08-31 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

  Persistence is added to all the entities defined in [[../objects/entities.org][=objects=]].


* Question

=Question= is a class with an attribute name of type =is_alphabetic_str=.

#+NAME: class_Question
#+begin_src python
args = {"__tablename__": "question",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=True, nullable=False),
#        "response": db.relationship('Response', 
#                                    backref=db.backref('question',\
#                                                        uselist=False))
        }

Question = ClassPersistenceTemplate.mk_persistent(Question, ['name'], **args)

#+end_src

*** Test Question
#+NAME: class_TestQuestion
#+BEGIN_SRC python
class TestPersistentQuestion(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_question(self):
        print "test_create_question"
        name="how are labs?"
        question1 = Question(name=name)
        question1.save()

        new_question = Question.get_by_id(1)
        self.assertEqual(new_question.get("name"), "how are labs?")

#+END_SRC


* Answer
  =Answer= is a class an attribute email of type =is_email_str=.
#+NAME: class_Answer
#+begin_src python
args = {"__tablename__": "answer",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=True, nullable=False),
#        "response": db.relationship('Response', backref=db.backref('answer',\
#                                                            uselist=False))
        }

Answer = ClassPersistenceTemplate.mk_persistent(Answer, ['name'], **args)

#+end_src

** Test Answer
#+NAME: class_TestAnswer
#+BEGIN_SRC python
class TestPersistenceAnswer(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_answer(self):
        print "test_create_answer"
        ans = "excellent labs"
        answer = Answer(name=ans)
        answer.save()
        answer = Answer.get_by_id(1)
        self.assertEqual(answer.get("name"), ans)

#+END_SRC


* Response
  =Response= is an entity that has fields =question= of type =Question=
  and =answer= of type =Answer=.

#+NAME: class_Response
#+BEGIN_SRC python
args = {"__tablename__": "response",
        "id": db.Column(db.Integer, primary_key=True),
        "question_id": db.Column(db.Integer, 
                                      db.ForeignKey('question.id'), 
                                      unique=True, nullable=True),
        "answer_id": db.Column(db.Integer, 
                                      db.ForeignKey('answer.id'), 
                                      unique=True, nullable=True)
      }

Response = ClassPersistenceTemplate.mk_persistent(Response, 
                                   ['question'], **args)

#+END_SRC

** Test Response
#+NAME: class_TestResponse
#+BEGIN_SRC python
class TestPersistenceResponse(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_response(self):
        print "test_create_response"

        name="how are labs?"
        question1 = Question(name=name)
        question1.save()

        ans = "excellent labs"
        answer1 = Answer(name=ans)
        answer1.save()

        res = Response(question=question1, answer=answer1)
        res.save()

        response = Response.get_by_id(1)

        self.assertEqual(response.get("question").get("name"),\
                         question1.get("name"))

        self.assertEqual(response.get("answer").get("name"),\
                         answer1.get("name"))

#+END_SRC


* Feedback
  A =Feedback= entity has fields =response= of type =Response=.

#+NAME: class_Feedback
#+BEGIN_SRC python
args = {"__tablename__": "feedback",
        "id": db.Column(db.Integer, primary_key=True),
        "response_id": db.Column(db.Integer, db.ForeignKey('response.id'), 
                                 nullable=False, unique=False)

        }

Feedback = ClassPersistenceTemplate.mk_persistent(Feedback, ['response'],
                                                    ,**args)

#+END_SRC

** Test User
#+NAME: class_TestUser
#+BEGIN_SRC python
class TestPersistenceUser(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_create_user(self):
        print "test_create_user"

        inst1 = Institute(name="IIT",address="Hyderabad")
        inst1.save()

        inst2 = Institute(name="IIIT",address="Hyderabad")
        inst2.save()

        na = Name(name="Jimi Hendrix")
        na.save()

        em = Email(email="jimi@gnu.org")
        em.save()

        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_targets=[])
        oc.save()

        nc = NC(institute=Institute.get_by_id(2), hub=oc, nc_targets=[], 
                workshops=[])
        nc.save()

        ro1 = Role(name="user", centre_oc=None, centre_nc=None)
        ro1.save()

        ro2 = Role(name="guest", centre_oc=None, centre_nc=None)
        ro2.save()

        ro3 = Role(name="OCC", centre_oc=OC.get_by_id(1), centre_nc=None)
        ro3.save()

        ro4 = Role(name="NCC", centre_nc=NC.get_by_id(1), centre_oc=None)
        ro4.save()

        roles = [ro1, ro2] 
        usr = User(name=na, email=em, roles=roles)
        usr.save()

        user = User.get_by_id(1)
        user_from_db = User.apply_filters(email=em)[0]
        self.assertEqual(is_user(user), True)
        self.assertEqual(is_user(user_from_db), True)

        self.assertEqual(user.get("email").get('email'), "jimi@gnu.org")
        self.assertEqual(user_from_db.get("name").get('name'), 
                             "Jimi Hendrix")

    def test_update_user(self):
        print "test_update_user"

        inst1 = Institute(name="IIT",address="Hyderabad")
        inst1.save()

        inst2 = Institute(name="IIIT",address="Hyderabad")
        inst2.save()

        na = Name(name="Jimi Hendrix")
        na.save()

        em = Email(email="jimi@gnu.org")
        em.save()

        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_targets=[])
        oc.save()

        nc = NC(institute=Institute.get_by_id(2), hub=oc, nc_targets=[], 
                workshops=[])
        nc.save()

        ro1 = Role(name="user", centre_oc=None, centre_nc=None)
        ro1.save()

        ro2 = Role(name="guest", centre_oc=None, centre_nc=None)
        ro2.save()

        ro3 = Role(name="OCC", centre_oc=OC.get_by_id(1), centre_nc=None)
        ro3.save()

        ro4 = Role(name="NCC", centre_nc=NC.get_by_id(1), centre_oc=None)
        ro4.save()

        roles = [ro1, ro2] 
        usr = User(name=na, email=em, roles=roles)
        usr.save()

        user = User.get_by_id(1)
        user_from_db = User.apply_filters(email=em)[0]
        self.assertEqual(is_user(user), True)
        self.assertEqual(is_user(user_from_db), True)

        roles = [ro3, ro4]
        user_from_db.set(roles=roles)
        user_from_db = User.apply_filters(email=em)[0]

        self.assertEqual(user.get("roles")[0].get('name'), "OCC")

    def test_delete_user(self):
        print "test_delete_user"

        inst1 = Institute(name="IIT",address="Hyderabad")
        inst1.save()

        inst2 = Institute(name="IIIT",address="Hyderabad")
        inst2.save()

        na = Name(name="Jimi Hendrix")
        na.save()

        em = Email(email="jimi@gnu.org")
        em.save()

        oc = OC(institute=Institute.get_by_id(1), spokes=[], oc_targets=[])
        oc.save()

        nc = NC(institute=Institute.get_by_id(2), hub=oc, nc_targets=[], 
                workshops=[])
        nc.save()

        ro1 = Role(name="user", centre_oc=None, centre_nc=None)
        ro1.save()

        ro2 = Role(name="guest", centre_oc=None, centre_nc=None)
        ro2.save()

        ro3 = Role(name="OCC", centre_oc=OC.get_by_id(1), centre_nc=None)
        ro3.save()

        ro4 = Role(name="NCC", centre_nc=NC.get_by_id(1), centre_oc=None)
        ro4.save()

        roles = [ro1, ro2] 
        usr = User(name=na, email=em, roles=roles)
        usr.save()

        self.assertEqual(len(User.get_all()), 1)
        usr.delete()
        self.assertEqual(len(User.get_all()), 0)
 
#+END_SRC



* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import Question, Answer, Response
from runtime.utils.class_persistence_template import *
import datetime

#+end_src


** Tests
*** Imports for tests 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.persistence.entities import *
from runtime.rest.app import create_app

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()
#+END_SRC


* Tangling                                                      :boilerplate:
** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_Question>>
<<class_Answer>>
<<class_Response>>
#<<class_Feedback>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestQuestion>>
<<class_TestAnswer>>
<<class_TestResponse>>
#<<class_TestFeedback>>
<<run_test_cases>>
#+end_src
