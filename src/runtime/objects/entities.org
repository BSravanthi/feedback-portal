#+TITLE: Entities
#+AUTHOR: VLEAD
#+DATE: [2016-08-31 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction

In the object implementation of the Outreach Portal, 
all entities are Objects.  In addition, there is an object 
called =System= that holds the state of the application 
(=user-set=, =session-set=, etc.).

Each of the entities of the data model is implemented as
an object.  Each entity is defined via a class definition, a
constructor and getter and setter methods that access and
mutate the fields of the entity. 

The main idea in the object model is that certain relations
of the data model (those that are total functions) are
implemented as /fields/.  For example the =User= object has
a field called =email= that holds an object of type =Email=.

As a start, we do not implement all relations of the data
model.  For example, the relation =user: Email > User?= is
not implemented.  It should be, if we desire to have an
implementation that is /complete/ with respect to the data
model.  Which elements of the data model are implemented and
which are not are decisions based on the end user
requirements of the application.


* Base Classes
#+NAME: base_classes
#+BEGIN_SRC python
Question = ClassTemplate.mk_class("Question")
Answer = ClassTemplate.mk_class("Answer")
Response = ClassTemplate.mk_class("Response")
Feedback = ClassTemplate.mk_class("Feedback")

#+END_SRC


* Type Predicates
#+NAME: type_predicates
#+BEGIN_SRC python
is_question = is_inst(Question)
check_question = check_pred(is_question)

is_answer = is_inst(Answer)
check_answer = check_pred(is_answer)

is_feedback = is_inst(Feedback)
check_feedback = check_pred(is_feedback)

def are_responses_or_empty_list(responses):
    ret_val = True
    if is_list(responses):
        for res in responses:
            if not is_response(res):
                ret_val = False
    else:
        ret_val = False

    return ret_val

#+END_SRC


* Question
   =Question= is an entity that has a field =name= which is a string
#+NAME: class_Question
#+begin_src python
Question.add_attributes(name=is_str)
Question.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("name") == other.get("name")

#+end_src

*** Test Question
#+NAME: class_TestQuestion
#+BEGIN_SRC python
class TestQuestion(TestCase):
    TESTING = True
    def test_object_question(self):
        print "test_object_question"
        name="how are labs?"
        question = Question(name=name)
    
        self.assertEqual(question.get("name"), name)

#+END_SRC


* Answer
   =Answer= is an entity that has a field =name= which is a string
#+NAME: class_Answer
#+begin_src python
Answer.add_attributes(name=is_str)
Answer.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("name") == other.get("name")

#+end_src

*** Test Answer
#+NAME: class_TestAnswer
#+BEGIN_SRC python
class TestAnswer(TestCase):
    TESTING = True

    def test_object_answer(self):
        print "test_object_answer"
        ans = "excellent labs"
        answer = Answer(name=ans)
        self.assertEqual(answer.get("name"), ans)

#+END_SRC


* Feedback
  A =Feedback= entity has fields =gateway= of type string, =lab_id= of type
  string, =exp_id= of type sting and responses of type =Response=.

#+NAME: class_Feedback
#+BEGIN_SRC python
Feedback.add_attributes(gateway_ip=is_str,
                        lab_id=is_str,
                        exp_id=is_str,
                        date=is_date,
                        responses=are_responses_or_empty_list)

#Feedback.__eq__ = lambda self, other: \
#                  isinstance(other, self.__class__) and \
#                  self.get("response") == other.get("response")

#+END_SRC

** Test Feedback
#+Name: class_TestFeedback
#+BEGIN_SRC python
class TestFeedback(TestCase):
    TESTING = True

    def test_object_feedback(self):
        print "test_object_feedback"
        gateway_ip = "10.100.40.2"
        lab_id = "cse01"
        exp_id = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        fb = Feedback(gateway_ip=gateway_ip,
                      lab_id=lab_id,
                      exp_id=exp_id,
                      date=date,
                      responses=[])

        self.assertEqual(fb.get("gateway_ip"), gateway_ip)
        self.assertEqual(fb.get("lab_id"), lab_id)
        self.assertEqual(fb.get("exp_id"), exp_id)
        self.assertEqual(fb.get("date"), date)
        self.assertEqual(fb.get("responses"), [])
#+END_SRC


* Response
  A =Response= entity has fields =question= of type =Question= and =answer= of type =Answer=. 

#+NAME: class_Response
#+BEGIN_SRC python
Response.add_attributes(question=is_question, 
                        answer=is_answer, 
                        feedback=is_feedback)

Response.__eq__ = lambda self, other: \
                  isinstance(other, self.__class__) and \
                  self.get("question") == other.get("question")

#+END_SRC

** Test Response
#+Name: class_TestResponse
#+BEGIN_SRC python
class TestResponse(TestCase):
    TESTING = True

    def test_object_response(self):
        print "test_object_response"

        name="how are labs?"
        question1 = Question(name=name)

        ans = "excellent labs"
        answer1 = Answer(name=ans)

        gateway_ip = "10.100.40.2"
        lab_id = "cse01"
        exp_id = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        fb = Feedback(gateway_ip=gateway_ip,
                      lab_id=lab_id,
                      exp_id=exp_id,
                      date=date,
                      responses=[])

        res = Response(question=question1, answer=answer1, feedback=fb)


        self.assertEqual(res.get("question").get("name"),\
                         question1.get("name"))

        self.assertEqual(res.get("answer").get("name"),\
                         answer1.get("name"))

        self.assertEqual(res.get("feedback").get("gateway_ip"),\
                         gateway_ip)

#+END_SRC



* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.utils.type_utils import *
from runtime.utils.class_templates import *
from runtime.exceptions.exceptions import *

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from entities import *

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<base_classes>>
<<type_predicates>>
<<class_Question>>
<<class_Answer>>
<<class_Response>>
<<class_Feedback>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestQuestion>>
<<class_TestAnswer>>
<<class_TestFeedback>>
<<class_TestResponse>>
<<run_test_cases>>
#+end_src
