#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

This document illustrates building of the REST API.
* REST
** Add Feedback
   This is the REST API method for adding feedback. 

#+NAME: add_feedback
#+BEGIN_SRC python
@api.route('/feedback', methods=['GET', 'POST'])
def add_feedback():
    SystemInterface(PersistenceDelegate)
    if request.mehtod == 'GET':
       pass

    if request.mothod == 'POST':
        print "#########################"
	if not request.json or not 'lab_name' in request.json or not 'exp_name' in request.json or \
	    not 'responses' in request.json or not 'key' in request.json:
	    abort(400)
            
	else:
	    lab_name = request.json['lab_name']
	    exp_name = request.json['exp_name']
	    responses = request.json['responses']
	    key = request.json['key']
	    gate_way_ip = request.environ['REMOTE_ADDR']
	    date = "25-07-1993"
	    try:
	        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
	                                         gate_way_ip, responses, key)

		return fb.to_client()

	    except Exception, e:
	        abort(500)
#+END_SRC

** TestAddFeedback
#+NAME: test_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_add_feedback(self):
        print "test_add_feedback"

        payload = {'lab_name': 'data structure',
                   'exp_name': 'tuples',                   
                   'date': '25-07-2016',
                   'gate_way_ip': '10.2.56.65',
                   'key' : Config.key,
                   'responses': [{'name': 'Exp is working', 'answers':['yes', 'no'] }]}

        headers = {'content-type': 'application/json'}

        response = self.client.post("/feedback", data=json.dumps(payload), headers=headers)

        self.assertEqual(response.status_code, 200)

#+END_SRC

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
from flask import session, render_template, Blueprint, request, jsonify, abort, current_app, redirect, url_for
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename
from runtime.config.config import Config
from runtime.system.system_interface import *

api = Blueprint('APIs', __name__)


#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.utils.class_persistence_template import *
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.persistence.entities import *
import json
from api import *

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangle                          :boilerplate:
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<add_feedback>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_feedback>>
<<run_test_cases>>
#+end_src
