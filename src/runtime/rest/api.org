#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.


* REST

** Get and Add Feedback
   This is the REST API method for both getting and adding feedback.

#+NAME: add_feedback
#+BEGIN_SRC python
@api.route('/feedback', methods=['GET', 'POST'])
def get_add_feedback():
    if request.method == 'GET':
	if 'lab_name' not in request.args or 'key' not in request.args:
	    error_message = 'Either lab_name or key or both arguments are not passed' 
	    """
	    if request.headers['Content-Type'] == "application/json":
		abort(400, error_message)
	    else:
	    """
	    return render_template('error.html', 
				   data=error_message)
	else:
	    lab_name = str(request.args['lab_name'])
	    key = str(request.args['key'])
	if 'exp_name' not in request.args:
	    exp_name = None
	else:
	    exp_name = str(request.args['exp_name'])
	if 'user_id' not in request.args:
	    user_id = None
	else:
	    user_id = str(request.args['user_id'])
	    current_app.logger.debug("lab_name = %s, exp_name=%s, user_id=%s, "
				     "key=%s" % 
				     (lab_name, exp_name, user_id, key))
	try:
	    response = SystemInterface.get_feedback_form(key, 
							 lab_name, 
							 exp_name,
							 user_id)
	    """
	    if request.headers['Content-Type'] == "application/json":
		return jsonify(response)
	    else:
	    """
	    return render_template('index.html', 
				   questions_data=response)
	except NotAuthorizedError as err:
	    error_message =  'Not Authorized error: %s' % str(err)
	    if request.headers['Content-Type'] == "application/json":
		abort(401, error_message)
	    else:
		return render_template('error.html', 
				       data=error_message)
	except TypeError as err:
	    error_message = 'Malformed arguments, error: %s' % str(err)
	    """
	    if request.headers['Content-Type'] == "application/json":
		abort(400, error_message)
	    else:
	    """
	    return render_template('error.html', 
				   data=error_message)
	except Exception as err:
	    error_message = 'error: %s' % str(err)
	    """
	    if request.headers['Content-Type'] == "application/json":
		abort(400, error_message)
	    else:
	    """
	    return render_template('error.html', 
				   data=error_message)

    if request.method == 'POST':
	if request.is_json:
	    data_json = json.dumps(request.get_json())
	    data_dict = yaml.safe_load(data_json)
	else:
	    abort(500, "the request does not contain data in json")

	if 'lab_name' not in data_dict or 'key' not in data_dict or \
	    'responses' not in data_dict:
	    abort(400, 'Either lab name or key or responses are not passed')
	else:
	    gateway_ip = str(request.remote_addr)
	    current_app.logger.debug("lab_name = %s, responses=%s, key=%s, "
					%(data_dict['lab_name'],
					  data_dict['responses'],
					  data_dict['key']))

	    data_dict["gateway_ip"] = gateway_ip
	try:
	    fb = SystemInterface.add_feedback(data_dict)
	    return jsonify({'status' : 'Success'})

	except NotAuthorizedError as err:
	    abort(401, 'Not Authorized error: %s' % str(err))
	except TypeError as err:
	    abort(400, 'Malformed arguments, error: %s' % str(err))
	except Exception as err:
	    abort(500, 'error: %s' % str(err))
  
#+END_SRC


*** TestGetFeedback
 #+NAME: test_get_feedback
 #+BEGIN_SRC python
class TestGetFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_feedback_form_data(self):
        print "test_get_lab_feedback_form_data"

        lab_name = "Data Structures"
        exp_name = "binary search"
        user_id = "123user"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, KEY)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], lab_name)

    def test_get_lab_feedback_with_401_error(self):
        print "test_get_lab_feedback_with_401_error"
        print "test not authorized error"

        lab_name = "Data Structures"
        exp_name = "binary search"
        user_id = "123user"
        key = "jigajiga"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, key)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 401)

    def test_get_lab_feedback_with_400_error(self):
        print "test_get_lab_feedback_with_401_error"
        print "test bad request"

        lab_name = ""
        exp_name = "binary search"
        user_id = "123user"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, KEY)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 400)

 #+END_SRC


*** TestAddFeedback
 #+NAME: test_add_feedback
 #+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback(self):
        print "test_add_feedback"

        payload = {'lab_name': 'data structure',
            'exp_name': 'tuples',
            'key' : KEY,
            'responses': [{'name': 'How is your breakfast?',
                            'answers':['yes', 'no'] }]
           }

        headers = {'Content-Type': 'application/json'}
        ip_address = {'REMOTE_ADDR': '1.2.3.4'}
        
        response = self.client.post("/feedback", data=json.dumps(payload),
                                 headers=headers,
                                 environ_overrides=ip_address)
        
        self.assertEqual(response.status_code, 200)
'''
    def test_get_lab_feedback_form_data(self):
        print "test_get_lab_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&key=some"
                                       " alphanumeric string",
                                        headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], "data structure")

    def test_get_exp_feedback_form_data(self):
        print "test_get_exp_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&exp_name"
                                       "=tuples&key=some alphanumeric string",
                                        headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], "data structure")
        self.assertEqual(result['exp_name'], "tuples")
'''
 #+END_SRC


** Get Feedback Usage
   This is the REST API method for getting the feedback usage. 

#+NAME: get_feedback_usage
#+BEGIN_SRC python
@api.route('/usage_from_feedback', methods=['GET'])
def get_feedback_usage():
    if request.method == 'GET':
        if 'gateway_ip' in request.args and 'date' in request.args and 'key'\
            in request.args:
            gateway_ip = str(request.args['gateway_ip'])
            date  = request.args['date']
            key = request.args['key']
            try:
                usage_count = SystemInterface.get_feedback_usage(gateway_ip,\
                                                                     date, key)
                usage = {'usage': usage_count}
                return jsonify(usage)
            except Exception, e:
                abort(500)

#+END_SRC


** TestGetFeedbackUsage
#+NAME: test_get_feedback_usage
#+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_usage(self):
        print "test_get_feedback_usage"

        payload = {'lab_name': 'data structure',
            'exp_name': 'tuples',
            'key' : KEY,
            'responses': [{'name': 'How is your breakfast?',
                            'answers':['yes', 'no'] }]
           }

        headers = {'Content-Type': 'application/json'}
        ip_address = {'REMOTE_ADDR': '1.2.3.4'}
        
        response = self.client.post("/feedback", data=json.dumps(payload),
                                 headers=headers,
                                 environ_overrides=ip_address)

        headers = {'content-type': 'application/json'}
        date_obj = datetime.datetime.now().date()
        date_str = date_obj.strftime('%d-%m-%Y')
        url = "/usage_from_feedback?gateway_ip=1.2.3.4&date="+date_str+"&key=defaultkey"
  
        response = self.client.get(url, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(result), 1)
        self.assertEqual(result['usage'], 1)

#+END_SRC


** Get Feedback Dump
   This is the REST API method for dumping the feedback forms to elastic search. 

#+NAME: get_feedback_dump
#+BEGIN_SRC python
@api.route('/feedback_dump', methods=['GET', 'POST'])
def get_feedback_dump():
    if request.method == 'GET':
        if 'date' in request.args and 'key' in request.args:
            date  = request.args['date']
            key = request.args['key']
            try:
                feedbacks = SystemInterface.get_feedback_dump(date, key)
                feedback_list=[]
                for feedback in feedbacks:
                    feedback_list.append(feedback)
#                print feedback_list
#                print type(feedback_list)
#                return feedback_list
                return jsonify({'status' : 'Success'})

            except Exception, e:
                abort(500)

#+END_SRC


** TestGetFeedbackDump
#+NAME: test_get_feedback_dump
#+BEGIN_SRC python
class TestGetFeedbackDump(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()


    def test_get_feedback_dump(self):
        print "test_get_feedback_dump"

        payload = {'lab_name': 'data structure',
            'exp_name': 'tuples',
            'key' : KEY,
            'responses': [{'name': 'How is your breakfast?',
                            'answers':['yes', 'no'] }]
           }

        headers = {'Content-Type': 'application/json'}
        ip_address = {'REMOTE_ADDR': '1.2.3.4'}
        
        response = self.client.post("/feedback", data=json.dumps(payload),
                                 headers=headers,
                                 environ_overrides=ip_address)

        date_obj = datetime.datetime.now().date()
        date_str = date_obj.strftime('%d-%m-%Y')

        url = "/feedback_dump?date="+date_str+"&key=defaultkey"


        print url
        response = self.client.get(url, headers=headers)
        self.assertEqual(response.status_code, 200)
#        date_1 = datetime.datetime.strptime(date_str, "%d-%m-%Y").date()
#        print response.data
#        self.assertEqual(response.date, date_1)

#+END_SRC

   
* WebApp

** Index HTML
#+BEGIN_SRC html :tangle ./templates/index.html :eval no :noweb yes
  
  <!DOCTYPE html>
  <html>
    <head>
      <title>Feedback Portal</title>
      <!-- Latest compiled and minified CSS -->
      <link rel = "stylesheet" href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity = "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
      <link rel = "stylesheet" href = "/static/css/main.css">
    </head>
    
    <body onload="renderFeedbackform();">
      <header>
        <!-- Navigation -->
        <nav class="navbar navbar-default " style="background-color: white !important; margin-bottom: 0px !important;">
          <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header page-scroll">
              <button aria-controls="bs-navbar" aria-expanded="true"  type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-navbar #bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
                <span class="icon-bar" style="background-color: #77BB41"></span>
              </button>
              <a class="navbar-brand main-logo-a" href="http://vlabs.ac.in/index.html"><img src="http://vlabs.ac.in/images/logo-new.png" class="img-responsive main-logo" /></a>
            </div>                  
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse menu-div" id="bs-example-navbar-collapse-1" style="border: 0px;">
              <ul class="nav navbar-nav navbar-right menu-ul search-ul" style="position: relative; top: -5px;">
                <li></li>
              </ul>
              <ul class="nav navbar-nav navbar-right menu-ul">
                <li class="page-scroll menu-li " >
                  <a href="http://vlabs.ac.in/" class="menu-a" >HOME</a>
                </li>
                <li class="page-scroll menu-li">
                  <a href="http://vlabs.ac.in/labs.html"  class="menu-a " >ALL LABS</a>
                </li>
                <li class="page-scroll menu-li " >
                  <a href="http://vlabs.ac.in/#partner" class="menu-a" >PARTNERS</a>
                </li><li class="page-scroll menu-li " >
                  <a href="http://vlabs.ac.in/#contact" class="menu-a" >CONTACT</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </header>
      <div class="row">
        <hr style="background:#ff6600 !important;  height: 8px; margin-top: 0px;">
      </div>
      <div class="container">
        <h1> Virtual Labs Feedback Form </h1>
        <h4> Please fill in details below and click on submit </h4>
        
        <form class="form" id="feedback-form" onsubmit="submitFeedback(event)">
          <div class="form-group">
            <label class="" id="lab_name_label"></label>
            <input class="form-control" id="lab_name_value" disabled="true">
          </div>
          
          <div class="form-group">
            <label class="" id="exp_name_label"></label>
            <input class="form-control" id="exp_name_value" disabled="true">
          </div>
          <div class="form-group" id="questions_list"></div>
          <button class="btn btn-primary" >Submit</button>
        </form>
      </div>
      <div id="footer">
        <div class="container">
          <p class="text-muted credit" style="color:#A29E9E; margin-left: 71% ">Version v1.0.0</p>
        </div>
      </div>
    </body>
    
    <!-- Jquery and Scipts Link -->
    <script> var data = {{ questions_data|tojson }};</script> 
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script type="text/javascript" src="/static/js/main.js"></script>
  </html>
  
#+END_SRC
** Error Page Template
#+BEGIN_SRC html :tangle ./templates/error.html :eval no :noweb yes

<html>
<head>
   <title>Error</title>
</head>
<body bgcolor="lightgrey">
  <p><b>Error : </b>{{ data }}<p>
</body>
</html>

#+END_SRC


** JS
#+BEGIN_SRC javascript :tangle ./static/js/main.js :eval no :noweb yes

  var sampleData = window.data;
  var labelQues, formGroup;
  function renderQuesLabel() {
      formGroup = document.createElement("div");
      formGroup.className = "form-group"
      labelQues = document.createElement('label');
      $("#questions_list").append(formGroup);
      formGroup.appendChild(labelQues);
  }
  
  function renderFeedbackform() {
      $("#lab_name_label").html("Lab Name");
      $("#lab_name_value").val(sampleData.lab_name)
      
      $("#exp_name_label").html("Experiment Name");
      $("#exp_name_value").val(sampleData.exp_name)
      
      var quesArray = sampleData.questions.length;
      for (var i = 0; i < quesArray; i++) {
          if (sampleData.questions[i].type === "checkbox") {
              renderQuesLabel();
              labelQues.innerHTML = sampleData.questions[i].name;
              var optionsDiv = document.createElement("div");
              optionsDiv.id = sampleData.questions[i].name;
              var optionsLength = sampleData.questions[i].options.length;
              
              for (var j = 0; j < optionsLength; j++) {
                  checkOption = document.createElement('input');
                  checkOption.type = "checkbox";
                  checkOption.value = sampleData.questions[i].options[j];
                  
                  ansLabel = document.createElement('label');
                  ansLabel.className = "checkbox-inline"
                  ansLabel.innerHTML = sampleData.questions[i].options[j];
                  
                  optionsDiv.appendChild(ansLabel);
                  ansLabel.insertBefore(checkOption, ansLabel.firstChild);
                  formGroup.appendChild(optionsDiv);
                  questions_list.appendChild(formGroup);
              }
          }
          
          else if(sampleData.questions[i].type === "radio") {
              renderQuesLabel();
              labelQues.innerHTML = sampleData.questions[i].name;
              var optionsDiv1 = document.createElement("div");
              optionsDiv1.id = sampleData.questions[i].name;
              var optionsLength = sampleData.questions[i].options.length;
              
              for (var k = 0; k < optionsLength; k++) {
                  radioOption = document.createElement('input');
                  radioOption.type = "radio";
                  radioOption.className = "";
                  radioOption.name = sampleData.questions[i].name;
                  radioOption.value = sampleData.questions[i].options[k];
                  
                  radioLabel = document.createElement('label');
                  radioLabel.className = "radio-inline";
                  radioLabel.innerHTML = sampleData.questions[i].options[k];
                  
                  optionsDiv1.appendChild(radioLabel);
                  radioLabel.insertBefore(radioOption, radioLabel.firstChild);
                  formGroup.appendChild(optionsDiv1);
                  questions_list.appendChild(formGroup);
              }
          }
          else if (sampleData.questions[i].type === "text") {
              var ansTextArea;
              renderQuesLabel();
              labelQues.innerHTML = sampleData.questions[i].name;
              
              ansTextArea = document.createElement("textarea");
              ansTextArea.className = "form-control"
              ansTextArea.id = sampleData.questions[i].name;
              
              formGroup.appendChild(ansTextArea);
          }
          else if(sampleData.questions[i].type === 'textBox') {
              var ansTextBox;
              renderQuesLabel();
              labelQues.innerHTML = sampleData.questions[i].name;
              
              ansTextBox = document.createElement("input");
              ansTextBox.className = "form-control"
              ansTextBox.id = sampleData.questions[i].name;
              
              formGroup.appendChild(ansTextBox);
          }
      }
  }
  
  function submitFeedback(event) {
      
      event.preventDefault();
      var feedback = {}; // the final feedback object
      feedback.lab_name = sampleData.lab_name;
      feedback.exp_name = sampleData.exp_name;
      //feedback.user_id = sampleData.user_id;
      feedback.key = sampleData.key;
      
      feedback.responses = []; // the list of questions and user answers
      var quesArray = sampleData.questions.length;
      // loop over the questions
      for (var i = 0; i < quesArray; i++) {
          var questionElement = document.getElementById(sampleData.questions[i].name);
          var answer = null;
          if(sampleData.questions[i].type === 'radio') {
	      answer = []
              var children = questionElement.querySelectorAll('input');
              for(var j = 0; j < children.length; j++) {
                  var child = children[j];
                  // console.log('child', child, child.type, child.checked);
                  if(child.type === 'radio' && child.checked === true) {
                      answer.push(child.value);

                  }
              }
          }
          else if(sampleData.questions[i].type === 'checkbox') {
              answer = [];
              var children = questionElement.querySelectorAll('input');
              for(var j = 0; j < children.length; j++) {
                  var child = children[j];
                  if(child.checked === true) {
                      // console.log('selected', child.value);
                      answer.push(child.value);
                  }
              }
          }
          else if(sampleData.questions[i].type === 'text') {
              var input = questionElement;
              answer = input.value;
          }
          else if(sampleData.questions[i].type === 'text') {
              var input = questionElement;
              
              answer = input.value;
          }
          // create an object to insert the current question data
          var question = {};
          question.name = sampleData.questions[i].name;
          //question.type = sampleData.questions[i].type;
          question.answers = answer;
          feedback.responses.push(question);
      }
      // Posting json data to /feedback api
      console.log(feedback);
      $.ajax({
          url: 'http://localhost:5000/feedback',
          type: 'POST',
          data: JSON.stringify(feedback),
          contentType: 'application/json',
          success: function (data) {
              alert("Submitted");
              console.log(data);
          },
          error: function(data){
              console.log("Error in submitted feedback");
              console.log(data); 
          }
          
      });    
      
  }
  
#+END_SRC

** CSS 
#+BEGIN_SRC css :tangle ./static/css/main.css :eval no :noweb yes
@import url(https://fonts.googleapis.com/css?family=Raleway:400,300,700,500,600);
body {
    font-family:  sans-serif;
    font-size: 14px;
    color: #767676;
}

#feedback-form {
    width: 80%;
    margin-top: 30px;
}

.headInfo {
    margin-left: 0px; 
    margin-top: 20px;
}

.values {
    margin-left: 0px;
    text-align: left;
}

.rowCol {
    border: 1px solid #ccc
}

.mainrow {
    margin-top: 4px;
}

.navbar-default, .navbar-inverse {
    border: 0;
}

.footer-div
{
    margin-top:120px;
}

.main-logo-a {
    height: auto;
    overflow: visible;
    margin-left: 0px !important;
    padding-bottom: 10px !important;
    padding-top: 10px !important;
}

.menu-a {
    font-size: 14px !important;
    font-family: 'Raleway' !important;
    color: #2C99CD !important;
    padding-left: 10px !important;
    padding-bottom: 5px !important;
    padding-top: 5px !important;
    padding-right: 10px !important;
}

.menu-a-active {
    color: white !important;
}

.menu-li {
    border-radius: 10px;
    margin-left: 20px;
    margin-right: 20px;
}

.menu-li:HOVER {
    background-color: #77BB41 !important;
}

.menu-a:HOVER {
    color: white !important;
}

.menu-li-active {
    background-color: #77BB41;
}

.menu-ul {
    margin-top: 45px;
}
#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:

** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<add_feedback>>
<<get_feedback_usage>>
<<get_feedback_dump>>
#+END_SRC

** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_get_feedback>>
<<test_add_feedback>>
<<test_get_feedback_usage>>
<<test_get_feedback_dump>>
<<run_test_cases>>
#+end_src

