#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

This document illustrates building of the REST API.
* REST
** Add Feedback
   This is the REST API method for adding feedback. 

#+NAME: add_feedback
#+BEGIN_SRC python
@api.route('/feedback', methods=['GET', 'POST'])
def add_feedback():
    if request.method == 'GET':
            
        if 'lab_name' in request.args and 'exp_name' in request.args and 'key'\
            in request.args:
            lab_name = request.args['lab_name']
            exp_name = request.args['exp_name']
            key = request.args['key']
            questions = Config.questions
            json_data = {'lab_name': str(lab_name), 'exp_name': str(exp_name), 
                         'questions': questions}
            return jsonify(json_data)

        elif 'lab_name' in request.args and 'key' in request.args:
            lab_name = request.args['lab_name']
            key = request.args['key']
            questions = Config.questions
            json_data = {'lab_name': str(lab_name), 'questions': questions}
            return jsonify(json_data)
        else:
            pass

    if request.method == 'POST':
        if not request.json or not 'lab_name' in request.json or not \
          'exp_name' in request.json or not 'responses' in request.json \
          or not 'key' in request.json:
	    abort(400)
        else:
            lab_name = request.json['lab_name']
            exp_name = request.json['exp_name']
            responses = request.json['responses']
            key = request.json['key']
            if not 'gateway_ip' in request.json['gateway_ip']:
                gateway_ip = str(request.remote_addr)
            else:
                gateway_ip = str(request.json['gateway_ip'])
            date = request.json['date']
            try:
                fb = SystemInterface.add_feedback(lab_name, exp_name, date, \
                                                gateway_ip, responses, key)
                return "{'status' : 'success'}"

            except Exception, e:
                abort(500)

#+END_SRC

** TestAddFeedback
#+NAME: test_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback(self):
        print "test_add_feedback"

        payload = {'lab_name': 'data structure',
                   'exp_name': 'tuples',
                   'date': '25-07-2016',
                   'gateway_ip': '10.4.0.12',
                   'key' : Config.key,
                   'responses': [{'name': 'Exp is working',
                                  'answers':['yes', 'no'] }]
                  }

        headers = {'content-type': 'application/json'}
        response = self.client.post("/feedback", data=json.dumps(payload),
                                        headers=headers)
        self.assertEqual(response.status_code, 200)

    def test_get_lab_feedback_form_data(self):
        print "test_get_lab_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&key=some"
                                       " alphanumeric string",
                                        headers=headers)
        self.assertEqual(response.status_code, 200)

    def test_get_exp_feedback_form_data(self):
        print "test_get_exp_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&exp_name"
                                       "=tuples&key=some alphanumeric string",
                                        headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

** Get Feedback Usage
   This is the REST API method for adding feedback. 

#+NAME: get_feedback_usage
#+BEGIN_SRC python
@api.route('/feedback_usage_by_workshop', methods=['GET', 'POST'])
def get_feedback_usage():
    if request.method == 'GET':
        if 'gateway_ip' in request.args and 'date' in request.args and 'key'\
            in request.args:
            gateway_ip = str(request.args['gateway_ip'])
            date  = request.args['date']
            key = request.args['key']
            try:
                usage_count = SystemInterface.get_feedback_usage(gateway_ip,\
                                                                     date, key)
                usage = {'usage': usage_count}
                return jsonify(usage)
            except Exception, e:
                abort(500)

#+END_SRC

** TestGetFeedbackUsage
#+NAME: test_get_feedback_usage
#+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_usage(self):
        print "test_get_feedback_usage"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        responses = [{"name": "how are you?", "answers" : ["yes"]},
                     {"name": "how are the labs?", 
                     "answers": ["yes", "no", "ok"]}
                    ]
        key = Config.key
        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
                                               gateway_ip, responses, key)

        headers = {'content-type': 'application/json'}
        url = "/feedback_usage_by_workshop?gateway_ip=10.2.56.65&date=25-07-2016&key=some alphanumeric string"
        response = self.client.get(url, headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import current_app
from runtime.config.config import Config
from flask import Flask, redirect, url_for
from werkzeug import secure_filename
from runtime.config.config import Config
from runtime.system.system_interface import *
from flask import jsonify
import json
api = Blueprint('APIs', __name__)

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.utils.class_persistence_template import *
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
import json
from api import *
from runtime.system.system_interface import *

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangle                          :boilerplate:
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<add_feedback>>
<<get_feedback_usage>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_feedback>>
<<test_get_feedback_usage>>
<<run_test_cases>>
#+end_src
