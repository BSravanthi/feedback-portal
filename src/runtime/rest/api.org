#+TITLE: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API.


* REST
** Get and Add Feedback
   This is the REST API method for both getting and adding feedback.

#+NAME: add_feedback
#+BEGIN_SRC python
@api.route('/feedback', methods=['GET', 'POST'])
def get_add_feedback():
    if request.method == 'GET':
        if 'lab_name' not in request.args or 'key' not in request.args:
            abort(400, 'Either lab name or key or both are not passed')
        else:
            lab_name = str(request.args['lab_name'])
            key = str(request.args['key'])
        if 'exp_name' not in request.args:
            exp_name = None
        else:
            exp_name = str(request.args['exp_name'])
        if 'user_id' not in request.args:
            user_id = None
        else:
            user_id = str(request.args['user_id'])
            current_app.logger.debug("lab_name = %s, exp_name=%s, user_id=%s, "
                                      "key=%s" % 
                                      (lab_name, exp_name, user_id, key))
        try:
            response = SystemInterface.get_feedback_form(key, 
                                                         lab_name, 
                                                         exp_name,
                                                         user_id)
            if request.headers['Content-Type'] == "application/json":
                return jsonify(response)
            else:
                return render_template('index.html', 
                                        questions_data=response)
        except NotAuthorizedError as err:
            abort(401, 'Not Authorized error: %s' % str(err))
        except TypeError as err:
            abort(400, 'Malformed arguments, error: %s' % str(err))
        except Exception as err:
            abort(500, 'error: %s' % str(err))


    if request.method == 'POST':
        if not request.json or not 'lab_name' in request.json or not \
          'exp_name' in request.json or not 'responses' in request.json \
          or not 'key' in request.json:
	    abort(400)
        else:
            lab_name = request.json['lab_name']
            exp_name = request.json['exp_name']
            responses = request.json['responses']
            key = request.json['key']
            if not 'gateway_ip' in request.json['gateway_ip']:
                gateway_ip = str(request.remote_addr)
            else:
                gateway_ip = str(request.json['gateway_ip'])
            date = request.json['date']
            try:
                fb = SystemInterface.add_feedback(lab_name, exp_name, date, \
                                                gateway_ip, responses, key)
                                                

                return "{'status' : 'Success'}"

            except Exception, e:
                abort(500)

#+END_SRC

*** TestGetFeedback
 #+NAME: test_get_feedback
 #+BEGIN_SRC python
class TestGetFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_feedback_form_data(self):
        print "test_get_lab_feedback_form_data"

        lab_name = "Data Structures"
        exp_name = "binary search"
        user_id = "123user"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, KEY)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], lab_name)

    def test_get_lab_feedback_with_401_error(self):
        print "test_get_lab_feedback_with_401_error"
        print "test not authorized error"

        lab_name = "Data Structures"
        exp_name = "binary search"
        user_id = "123user"
        key = "jigajiga"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, key)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 401)

    def test_get_lab_feedback_with_400_error(self):
        print "test_get_lab_feedback_with_401_error"
        print "test bad request"

        lab_name = ""
        exp_name = "binary search"
        user_id = "123user"
        headers = {'Content-Type': 'application/json'}
        request_str = "/feedback?lab_name=%s&exp_name=%s&user_id=%s&key=%s" \
          % (lab_name, exp_name, user_id, KEY)

        print "request-str = %s" % request_str
        response = self.client.get(request_str, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 400)

 #+END_SRC

*** TestAddFeedback
 #+NAME: test_add_feedback
 #+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback(self):
        print "test_add_feedback"

        payload = {'lab_name': 'data structure',
                   'exp_name': 'tuples',
                   'date': '25-07-2016',
                   'gateway_ip': '10.4.0.12',
                   'key' : '', #Config.key,
                   'responses': [{'name': 'Exp is working',
                                  'answers':['yes', 'no'] }]
                  }

        headers = {'content-type': 'application/json'}
        response = self.client.post("/feedback", data=json.dumps(payload),
                                        headers=headers)
        self.assertEqual(response.status_code, 200)

    def test_get_lab_feedback_form_data(self):
        print "test_get_lab_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&key=some"
                                       " alphanumeric string",
                                        headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], "data structure")

    def test_get_exp_feedback_form_data(self):
        print "test_get_exp_feedback_form_data"

        headers = {'content-type': 'application/json'}
        response = self.client.get("/feedback?lab_name=data structure&exp_name"
                                       "=tuples&key=some alphanumeric string",
                                        headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(result['lab_name'], "data structure")
        self.assertEqual(result['exp_name'], "tuples")

 #+END_SRC

** Get Feedback Usage
   This is the REST API method for getting the feedback usage. 

#+NAME: get_feedback_usage
#+BEGIN_SRC python
@api.route('/feedback_usage_by_workshop', methods=['GET'])
def get_feedback_usage():
    if request.method == 'GET':
        if 'gateway_ip' in request.args and 'date' in request.args and 'key'\
            in request.args:
            gateway_ip = str(request.args['gateway_ip'])
            date  = request.args['date']
            key = request.args['key']
            try:
                usage_count = SystemInterface.get_feedback_usage(gateway_ip,\
                                                                     date, key)
                usage = {'usage': usage_count}
                return jsonify(usage)
            except Exception, e:
                abort(500)

#+END_SRC

** TestGetFeedbackUsage
#+NAME: test_get_feedback_usage
#+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_usage(self):
        print "test_get_feedback_usage"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        responses = [{"name": "how are you?", "answers" : ["yes"]},
                     {"name": "how are the labs?", 
                     "answers": ["yes", "no", "ok"]}
                    ]
#        key = Config.key
        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
                                               gateway_ip, responses, key)

        headers = {'content-type': 'application/json'}
        url = "/feedback_usage_by_workshop?gateway_ip=10.2.56.65&date=25-07-2016&key=some alphanumeric string"
        response = self.client.get(url, headers=headers)
        result = json.loads(response.data)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(len(result), 1)
        self.assertEqual(result['usage'], 1)

#+END_SRC

** Get Feedback Dump
   This is the REST API method for dumping the feedback forms to elastic search. 

#+NAME: get_feedback_dump
#+BEGIN_SRC python
@api.route('/feedback_dump', methods=['GET', 'POST'])
def get_feedback_dump():
    if request.method == 'GET':
        if 'date' in request.args and 'key' in request.args:
            date  = request.args['date']
            key = request.args['key']
            try:
                feedbacks = SystemInterface.get_feedback_dump(date, key)
                feedback_list=[]
                for feedback in feedbacks:
                    feedback_list.append(feedback.to_client())
                print feedback_list
                print type(feedback_list)
                return jsonify_list(feedback_list)
            except Exception, e:
                abort(500)

#+END_SRC

** TestGetFeedbackDump
#+NAME: test_get_feedback_dump
#+BEGIN_SRC python
class TestGetFeedbackDump(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_dump(self):
        print "test_get_feedback_dump"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        responses = []
#        key = Config.key
        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
                                               gateway_ip, responses, key)

        headers = {'content-type': 'application/json'}
        url = "/feedback_dump?date=25-07-2016&key=some alphanumeric string"
        response = self.client.get(url, headers=headers)
        self.assertEqual(response.status_code, 200)
        date_1 = datetime.datetime.strptime(date, "%d-%m-%Y").date()
        self.assertEqual(response[0].date, date_1)

#+END_SRC


* WebApp

** Index HTML
#+BEGIN_SRC html :tangle ./templates/index.html :eval no :noweb yes

<!DOCTYPE html>
<html>
  <head>
    <title>Feedback Portal</title>
    <!-- Latest compiled and minified CSS -->
    <link rel = "stylesheet" href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity = "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href = "/static/css/main.css" rel = "stylesheet">
    
    
   <style>
    body {
    	font-family:  sans-serif;
    	font-size: 14px;
    	color: #767676;
    }
    #feedback-form {
      width: 80%;
      margin-top: 30px;
    }
    .headInfo {
    	margin-left: 0px; 
    	margin-top: 20px;
    }
    .values {
    	margin-left: 0px;
    	text-align: left;
    }
    .rowCol {
    	border: 1px solid #ccc
    	/*margin-top: 2px;*/
    }
    .mainrow {
    	margin-top: 4px;
    }
	</style>
  </head>

  <body onload="renderFeedbackform();">
    <div class="container">
      <h1> Virtual Labs - Feedback Form </h1>
      <h4> Please fill in details below and click on submit </h4>
      <div class="row headInfo">
      	<div class="row">
      		<div class = "col-sm-2" id = "user_name"></div>
      		<div class = "col-sm-4 values" id = "user_name_value"></div>

      		<div class = "col-sm-2" id = "roll_no"></div>
      		<div class = "col-sm-4 values" id = "roll_no_value"></div>


      	</div>
      	<div class="row">
      		<div class = "col-sm-2" id = "clg_name"></div>
      		<div class = "col-sm-4 values" id = "clg_name_value"></div>

      		<div class = "col-sm-2" id = "year_sem"></div>
      		<div class = "col-sm-4 values" id = "year_sem_value"></div>
      	</div>
      	<div class="row mainrow" >
      		<div id="row" disabed = "true"></div>
      		
      	</div>
      </div>
      <form class="form" id="feedback-form" onsubmit="submitFeedback(event)">
        <div class="form-group">
          <label class="" id="lab_name_label"></label>
          <input class="form-control" id="lab_name_value" disabled="true">
        </div>

        <div class="form-group">
          <label class="" id="exp_name_label"></label>
          <input class="form-control" id="exp_name_value" disabled="true">
        </div>
  		  <div class="form-group" id="questions_list"></div>
        <button class="btn btn-primary" >Submit</button>
      </form>
    </div>
    <div id="footer">
	<div class="container">
    	<p class="text-muted credit" style="color:#A29E9E; margin-left: 71% ">Version v1.0.0</p>
  	</div>
</div>
  </body>
  <script> var data = {{ questions_data|tojson }};

</script>
  <!-- Jquery and Scipts Link -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script type="text/javascript" src="/static/js/main.js"></script> 
</html>

#+END_SRC

** JS
#+BEGIN_SRC javascript :tangle ./static/js/main.js :eval no :noweb yes
var sampleData = window.data;

var labelQues, formGroup;
function renderQuesLabel() {
	formGroup = document.createElement("div");
	formGroup.className = "form-group"
	labelQues = document.createElement('label');
	//labelQues.className = "col-sm-12";
	document.getElementById("questions_list").appendChild(formGroup);
	formGroup.appendChild(labelQues);
}

function renderFeedbackform() {
/*	var user_name = document.getElementById("user_name");
	user_name.innerHTML = "Name: ";
	var user_name_value = document.getElementById("user_name_value");
	user_name_value.innerHTML = sampleData.user_name;

	var clg_name = document.getElementById("clg_name");
	clg_name.innerHTML = "College Name: ";
	var clg_name_value = document.getElementById("clg_name_value");
	clg_name_value.innerHTML = sampleData.clg_name;

	var year_sem = document.getElementById("year_sem");
	year_sem.innerHTML = "Year/Sem: ";
	var year_sem_value = document.getElementById("year_sem_value");
	year_sem_value.innerHTML = sampleData.year_sem;

	var roll_no = document.getElementById("roll_no");
	roll_no.innerHTML = "Roll No.: ";
	var roll_no_value = document.getElementById("roll_no_value");
	roll_no_value.innerHTML = sampleData.roll_no;

	var row = document.getElementById("row");
	// <input class="form-control" id="lab_name_value" disabled="true">
	row.className = "col-sm-10 rowCol";
*/

	var lab_name_label = document.getElementById("lab_name_label");
	lab_name_label.innerHTML = "Lab Name";
	var lab_name_value = document.getElementById("lab_name_value");
	lab_name_value.value = sampleData.lab_name;

	var exp_name_label = document.getElementById("exp_name_label");
	exp_name_label.innerHTML= "Experiment Name";
	var exp_name_value = document.getElementById("exp_name_value");
	exp_name_value.value = sampleData.exp_name;

	var quesArray = sampleData.questions.length;
	for (var i = 0; i < quesArray; i++) {
		if (sampleData.questions[i].type === "checkbox") {
			renderQuesLabel();
			labelQues.innerHTML = sampleData.questions[i].name;
			var optionsDiv = document.createElement("div");
			//optionsDiv.className = "col-sm-12";
			optionsDiv.id = sampleData.questions[i].name;
			var optionsLength = sampleData.questions[i].options.length;
			for (var j = 0; j < optionsLength; j++) {
				checkOption = document.createElement('input');
				ansLabel = document.createElement('label');
				checkOption.type = "checkbox";
				//checkOption.className = "col-sm-1";
				checkOption.value = sampleData.questions[i].options[j];
				ansLabel.className = "checkbox-inline"
				ansLabel.innerHTML = sampleData.questions[i].options[j];
				//optionsDiv.appendChild(checkOption);
				optionsDiv.appendChild(ansLabel);
        ansLabel.insertBefore(checkOption, ansLabel.firstChild);
				formGroup.appendChild(optionsDiv);
				questions_list.appendChild(formGroup);
				// console.log("sampleData.questions[i].answers[j] is", sampleData.questions[i].answers[j])
			}
		}
		else if(sampleData.questions[i].type === "radio") {
			renderQuesLabel();
			labelQues.innerHTML = sampleData.questions[i].name;

			var optionsDiv1 = document.createElement("div");
			//optionsDiv1.className = "col-sm-12";
			optionsDiv1.id = sampleData.questions[i].name;
			var optionsLength = sampleData.questions[i].options.length;
			for (var k = 0; k < optionsLength; k++) {
				radioOption = document.createElement('input');
				radioLabel = document.createElement('label');
				radioOption.type = "radio";
				radioOption.className = "";
				radioLabel.className = "radio-inline";
				radioOption.name = sampleData.questions[i].name;
				radioOption.value = sampleData.questions[i].options[k];
				radioLabel.innerHTML = sampleData.questions[i].options[k];
				//optionsDiv1.appendChild(radioOption);
				optionsDiv1.appendChild(radioLabel);
        		radioLabel.insertBefore(radioOption, radioLabel.firstChild);
				formGroup.appendChild(optionsDiv1);
				questions_list.appendChild(formGroup);
			}
		}
    else if (sampleData.questions[i].type === "text") {
      var ansTextArea;
			renderQuesLabel();
			labelQues.innerHTML = sampleData.questions[i].name;
			ansTextArea = document.createElement("textarea");
			ansTextArea.className = "form-control"
			ansTextArea.id = sampleData.questions[i].name;
			formGroup.appendChild(ansTextArea);
    }
		else if(sampleData.questions[i].type === 'textBox') {
      var ansTextBox;
			renderQuesLabel();
			labelQues.innerHTML = sampleData.questions[i].name;
			ansTextBox = document.createElement("input");
			ansTextBox.className = "form-control"
			ansTextBox.id = sampleData.questions[i].name;
			formGroup.appendChild(ansTextBox);
		}
	}
}

function submitFeedback(event) {

    event.preventDefault();
  	var feedback = {}; // the final feedback object
  	feedback.lab_name = sampleData.lab_name;
  	feedback.exp_name = sampleData.exp_name;
  	feedback.key = sampleData.key;
  	feedback.user_id = sampleData.user_id;

/*  	feedback.user_name = sampleData.user_name;
  	feedback.roll_no = sampleData.roll_no;
  	feedback.clg_name = sampleData.clg_name;
  	feedback.year_sem = sampleData.year_sem;*/

  	feedback.questions = []; // the list of questions and user answers
	  var quesArray = sampleData.questions.length;

    // loop over the questions
	for (var i = 0; i < quesArray; i++) {
	  var questionElement = document.getElementById(sampleData.questions[i].name);
	  var answer = null;
		if(sampleData.questions[i].type === 'radio') {
      var children = questionElement.querySelectorAll('input');
	  		for(var j = 0; j < children.length; j++) {
	    		var child = children[j];
          // console.log('child', child, child.type, child.checked);
	    		if(child.type === 'radio' && child.checked === true) {
	      			// console.log('selected', child.value);
	      			answer = child.value;
	      			
	    		}
	  		}
		}
		else if(sampleData.questions[i].type === 'checkbox') {
	    	answer = [];
        var children = questionElement.querySelectorAll('input');
	    	for(var j = 0; j < children.length; j++) {
	        var child = children[j];
	        if(child.checked === true) {
	          // console.log('selected', child.value);
	          answer.push(child.value);
	          
	        }
	      }
	  }
		else if(sampleData.questions[i].type === 'text') {
	      	var input = questionElement;
	    	  answer = input.value;
	  }
	  else if(sampleData.questions[i].type === 'text') {
	      	var input = questionElement;
	    	  answer = input.value;
	  }
    // create an object to insert the current question data
	  var question = {};
	  question.name = sampleData.questions[i].name;
	  question.type = sampleData.questions[i].type;
	  question.answer = answer;
	  feedback.questions.push(question);
	  }
	  console.log(feedback); // the final object
	  console.log("Submitted feedback");
}

#+END_SRC


* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface


api = Blueprint('APIs', __name__)

#+end_src


** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<add_feedback>>
<<get_feedback_usage>>
<<get_feedback_dump>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_get_feedback>>
#<<test_add_feedback>>
#<<test_get_feedback_usage>>
#<<test_get_feedback_dump>>
<<run_test_cases>>
#+end_src

