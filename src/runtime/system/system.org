#+TITLE: System implementation for Feedback Poratal 3.0
#+AUTHOR: VLEAD
#+DATE: [2016-07-28 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil


* Introduction

A system has clear boundaries of input, output and state.
In the context of our application, the system interacts with
the external world (through command line function calls)
and also manages the entity objects in such a way that the
system invariants are maintained. 

The system's inputs are in terms of /operations/.  Each
operation consists of an operation name and a sequence of
arguments.  

In this implementation, an operation is identified by a
class.  The dictionary =ops_table= maps operation names to
their corresponding classes.

Each operation is divided into four checks.  A /check/ is a
predicate that either returns true or throws an exception.

The following checks are performed:

  - Arity check :: checks if the operation has the right
       number  of arguments.

  - Type check :: checks if the arguments have the correct
       type. 

  - Auth check :: checks if the session performing the
       operation is authorized to do so.

  - State check :: checks if the operation meets all the
       constraints imposed by the state of the system
       (referential integrity constraints, etc.)
 

** Structure of each operation class

The class corresponding to each operation has five fields:

  - arg_types :: a list of type predicates.  The length of
       this list is the arity of the operation.  The arity
       check is simply a comparison of the length of this
       list with the length of the list of arguments.  Each
       predicate in the =arg_types= list is applied to the
       corresponding argument to check the type of that
       argument.

  - auth_check :: a function that checks if the  =args= (which
       may include a session) together satisfy the
       authorization conditions imposed by the operation. 

  - state_check :: a function that checks =args= and checks
       if the particular state invariant holds.

  - action :: a function on args that (presumably) changes
       the state of the system and also returns an answer.
       An exception thrown by this function indicates a
       serious failure in the application (e.g., out of
       memory error). 


* The =System= class

** Constructor

   This is the generic =System= implementation.  The entities that make up the
   sytem can be pure objects or objects that can be persisted.

   The specific tasks on the composed objects is agnostic to the =system=.
   This is achieved by defining an API that the system uses and is implemented
   by composed entity set.

   The system is initialized based on what the system should be composed of.

#+NAME: class_system
#+begin_src python
class System ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize_system(cls):
        System.delegate = cls()
        System.session_set = []

    @staticmethod
    def is_session_admin(session):
        return session.get("role").get('name') == "admin"

    @staticmethod
    def is_session_OCC(session):
        return session.get("role").get('name')== "OCC"

    @staticmethod
    def is_session_NCC(session):
        return session.get("role").get('name')== "NCC"

    @staticmethod
    def is_session_reviewer(session):
        return session.get("role").get('name')== "reviewer"

    @staticmethod
    def is_session_guest(session):
        return session.get("role").get('name')== "guest"

    @staticmethod
    def is_session_noc(session):
        return session.get("role").get('name')== "noc"

    @staticmethod
    def session_exists(session):
        return session in System.session_set
 
#+end_src



** Arity and Type check methods 
   Arity Check ensures that correct number of arguments are passed to a functions. 
   Type Check ensures that the type of the arguments passed to a function are
   same as expected. 
   
   Any operation, before being executed is subjected to =Arity= and =Type=
   checks.  
#+NAME: arity_type_checks
#+BEGIN_SRC python
   
    @staticmethod
    def arity_check(args, n):
       if  (len(args) != n) :
          raise ArityError("arity mismatch: size of args  does not " + 
                           "match operation arity " )

    @staticmethod
    def type_check(args, arg_types):
        for key, value in args.iteritems():
            if not arg_types[key](value):
                raise TypeError("type mismatch: argument %s is not of " + 
                                "type " )
       
   
#+end_src



** =do= method 
   The =do= method is the main work-horse of =System= which is construed as the
   =Controller=.  Every operation follows a template and realized as a class
   that defines:
   1. Number of Arguments
   2. Type of Arguments
   3. Who is allowed to perform the operation
   4. Referential integrity checks and finally
   5. the operation that changes state of the system. 


#+NAME: do_function
#+begin_src python
    @staticmethod   
    def do(op, **args):
        cls = ops_table[op]
        arg_types  = cls.arg_types
        auth_check = cls.auth_check
        state_check = cls.state_check
        arity_and_type_checks_needed = cls.arity_and_type_checks_needed
        try:
            if arity_and_type_checks_needed:
               System.arity_check(args.keys(), len(arg_types.keys()))
               System.type_check(args, arg_types)
            auth_check(args)
            state_check(args)
            return cls.action(args)
        except (ArityError, TypeError, AuthError, StateError) as err:
            raise err

#+end_src


* Operations
  Operations provide the mechanism to either change or retrieve the state of
  the system.  While the system state is changed, it is imperative to maintain
  the invariant of the system.  Before the actual change in system is made,
  each operation goes through a series of checks:
  1. Arity Check - ensures the right number of arguments are provided to
     the operation.
  2. Type Check - ensures the arguments are of right type
  3. Auth Check - ensures only the authorized can perform the operation
  4. State Check - ensures System invariant is maintained

  Once these checks are satisfied, either the system state is modified or retrieved.

** =AddQuestion=
#+NAME: class_addquestion
#+begin_src python
class AddQuestion():
    arg_types = {"question": is_question, "key": is_str}
    arity_and_type_checks_needed = True

    @staticmethod
    def auth_check(args):
        key = args['key']
        if not key:
            raise AuthError("Not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        key = args["key"]
        if not System.delegate.key_exists(key):
            raise StateError("key %s does not exist in System"
                                % key)

    @staticmethod
    def action(args):
        question = args["question"]
        question = System.delegate.add_question(question)
        return question

#+end_src
** =AddAnswer=
#+NAME: class_addanswer
#+begin_src python
class AddAnswer():
    arg_types = {"answer": is_answer, "key": is_str}
    arity_and_type_checks_needed = True

    @staticmethod
    def auth_check(args):
        key = args['key']
        if not key:
            raise AuthError("Not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        key = args["key"]
        if not System.delegate.key_exists(key):
            raise StateError("key %s does not exist in System"
                                % key)

    @staticmethod
    def action(args):
        answer = args["answer"]
        answer = System.delegate.add_answer(answer)
        return answer

#+end_src
** =AddFeedback=
#+NAME: class_addfeedback
#+begin_src python
class AddFeedback():
    arg_types = {"gateway_ip": is_str, "lab_id": is_str,
                  "exp_id": is_str, "date": is_date, "key": is_str}
    arity_and_type_checks_needed = True

    @staticmethod
    def auth_check(args):
        key = args['key']
        if not key:
            raise AuthError("Not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        key = args["key"]
        if not System.delegate.key_exists(key):
            raise StateError("key %s does not exist in System"
                                % key)

    @staticmethod
    def action(args):
        gateway_ip = args["gateway_ip"]
        lab_id = args["lab_id"]
        exp_id = args["exp_id"]
        date = args["date"]
        feedback = System.delegate.add_feedback(gateway_ip, lab_id, exp_id, date)
        return feedback

#+end_src
** =AddResponse=
#+NAME: class_addresponse
#+begin_src python
class AddResponse():
    arg_types = {"response": is_response, "key": is_str}
    arity_and_type_checks_needed = True

    @staticmethod
    def auth_check(args):
        key = args['key']
        if not key:
            raise AuthError("Not Authorized to perform this action")

    @staticmethod
    def state_check(args):
        key = args["key"]
        if not System.delegate.key_exists(key):
            raise StateError("key %s does not exist in System"
                                % key)

    @staticmethod
    def action(args):
        response = args["response"]
        response = System.delegate.add_response(response)
        return response

#+end_src
** Operations Table
    Each operation has a corresponding implementation defined as a class. 

 #+NAME: ops_table
 #+BEGIN_SRC python                                                                          
ops_table = {'add_question' : AddQuestion,
             'add_answer' : AddAnswer,
             'add_feedback': AddFeedback,
             'add_response': AddResponse
            }

 #+END_SRC   

    
* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

from runtime.exceptions.custom_exceptions import *
from runtime.exceptions.exceptions import *
from runtime.objects.entities import is_str, is_question, is_answer, \
     is_feedback, is_date, is_response

#+end_src


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system>>
<<arity_type_checks>>
<<do_function>>
<<class_addquestion>>
<<class_addanswer>>
<<class_addfeedback>>
<<class_addresponse>>
<<ops_table>>

#+end_src



