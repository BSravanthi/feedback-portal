#+TITLE: System Interface implementation for Feedback Portal
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
** Structure of each operation class

* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():
    
    def __init__(self):
        raise Error('Can not instantiate system interface')

#+end_src


** AddFeedback

#+NAME: class_si_add_feedback
#+begin_src python

def add_feedback(self, lab_name, exp_name, date, gate_way_ip, responses, key ):
    print "test_add_feedback_in_system_interface"

    session = Session(key=key)
    feedback = System.do("add_feedback", gateway_ip=gateway_ip,
                           lab_name=lab_name, exp_name=exp_name,
                           date=date, responses=responses,
                           session=session)
    return feedback

#+end_src


** TestAddFeedback
#+NAME: test_class_si_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_api_add_feedback(self):
        print "test_api_add_user"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gate_way_ip = "10.2.56.65"
        responses = [{name : "question", answers : ["ans1", "ans2"]}]
        key = Config.key
        system_interface = SystemInterface()  

        fb = system_interface.add_feedback(lab_name, exp_name, date, gate_way_ip, responses, key)
        self.assertEqual("sripathi", user_dict2['name']['name'])


#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.config.config import Config
from runtime.system.system import *
from runtime.objects.entities import Session
#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError


from system_interface import *

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<class_si_add_feedback>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_system_interface>>
<<test_class_si_add_feedback>>
<<run_test_cases>>
#+end_src
