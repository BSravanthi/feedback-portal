#+TITLE: System Interface implementation for Feedback Portal
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
** Structure of each operation class

* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():
    
    def __init__(self, cls):
        System.initialize_system(cls)

#+end_src


** AddFeedback

#+NAME: class_si_add_feedback
#+begin_src python
    @staticmethod
    def add_feedback(lab_name, exp_name, new_date, gateway_ip,
                         responses, key):
        try:
            session = Session(key=str(key))
        except Exception as e:
            print str(e)
        date = datetime.datetime.strptime(new_date, "%d-%m-%Y").date()
        try:
            fb = Feedback(gateway_ip=str(gateway_ip),
                            lab_name=str(lab_name),
                            exp_name=str(exp_name),
                            date=date,
                            responses=[])
            fb.save()
        except Exception as e:
            print str(e)

        response_list = []
        for response in responses:
            try:
                question = Question(name=str(response['name']),
                                        question_type="")
            except Exception as e:
                print str(e)
            answers = response['answers']
            answer_list = []
            for answer in answers:
                try:
                    answer = Answer(name=str(answer))
                    answer_list.append(answer)
                except Exception as e:
                    print str(e)
            res = Response(question=question, answers=answer_list,
                               feedbacks=[fb])
            response_list.append(res)

            fb_id = fb.id

            try:
                feedback = System.do("add_responses_to_feedback",
                                    responses=response_list,
                                    fb_id=fb_id,
                                    session=session)
                return feedback
            except Exception as e:
                print str(e)

#+end_src


** TestAddFeedback
#+NAME: test_class_si_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback_in_system_interface(self):
        print "test_add_feedback_in_system_interface"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        responses = [{"name": "how are you?", "answers" : ["yes"]},
                     {"name": "how are the labs?", 
                     "answers": ["yes", "no", "ok"]}
                    ]

        key = Config.key

        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
                                               gateway_ip, responses, key)
        self.assertEqual(fb.get("lab_name"), lab_name)
        self.assertEqual(fb.get("exp_name"), exp_name)
        self.assertEqual(fb.get("gateway_ip"), gateway_ip)
        self.assertEqual(responses[0]['name'], 
                         fb.get("responses")[0].get("question").get("name"))

#+END_SRC


** GetFeedbackUsage

#+NAME: class_si_get_feedback_usge
#+begin_src python
    @staticmethod
    def get_feedback_usage(gateway_ip, new_date, key):
        try:
            session = Session(key=str(key))
        except Exception as e:
            print str(e)
        date = datetime.datetime.strptime(new_date, "%d-%m-%Y").date()
        gateway_ip = str(gateway_ip)
        try:
            usage = System.do("get_feedback_usage",
                                     gateway_ip=gateway_ip,
                                     date=date,
                                     session=session)
            return usage
        except Exception as e:
            print str(e)

#+end_src


** TestGetFeedbackUsage
#+NAME: test_class_si_get_feedback_usage
#+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        SystemInterface(PersistenceDelegate)

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback_in_system_interface(self):
        print "test_get_feedback_usage_in_system_interface"

        lab_name = "data structure"
        exp_name = "lists"
        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        responses = [{"name": "how are you?", "answers" : ["yes"]},
                     {"name": "how are the labs?", 
                     "answers": ["yes", "no", "ok"]}
                    ]

        key = Config.key

        fb = SystemInterface.add_feedback(lab_name, exp_name, date,
                                               gateway_ip, responses, key)

        date = "25-07-2016"
        gateway_ip = "10.2.56.65"
        key = Config.key
        usage = SystemInterface.get_feedback_usage(gateway_ip, date, key)
        self.assertEqual(usage, 1)

#+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.config.config import Config
from runtime.system.system import *
from runtime.system.persistent_delegate import *
from runtime.objects.entities import Session

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
#from runtime.rest.app import system_interface
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from system_interface import *

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<class_si_add_feedback>>
<<class_si_get_feedback_usge>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_si_add_feedback>>
<<test_class_si_get_feedback_usage>>
<<run_test_cases>>
#+end_src
