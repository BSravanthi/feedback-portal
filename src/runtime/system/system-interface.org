#+TITLE: System Interface implementation for Feedback Portal
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface is allows these two worlds to talk to each other. 


* The =SystemInterface= class

** Constructor

#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src


** GetFeedbackForm
#+NAME: get_feedback_form
#+BEGIN_SRC python
    @staticmethod
    def get_feedback_form(key, lab_name, exp_name, user_id):
        try:
            session_cls = System.delegate.entities['session']
            if len(lab_name) == 0:
                lab_name = None
            questions_dict = System.do("get_feedback_form",
                                           session=session_cls(key=key),
                                           lab_name=lab_name, 
                                           exp_name=exp_name, 
                                           user_id=user_id)
            return questions_dict

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            raise err

        except Exception as err:
            raise err

#+END_SRC

*** Test GerFeedBackForm
 #+NAME: test_class_get_feedback_form
 #+BEGIN_SRC python
class TestGetFeedbackForm(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_form_in_system_interface(self):
        print "test_get_feedback_form_in_system_interface"

        lab_name = "data structures"
        exp_name = "binary search"
        user_id = "123user"
        key = KEY

        questions_dict = SystemInterface.get_feedback_form(key, lab_name, 
                                                               exp_name,
                                                               user_id)
        self.assertEqual(questions_dict['lab_name'], lab_name)

    def test_get_feedback_form_with_type_error(self):
        print "test_get_feedback_form_with_type_error"

        lab_name = None
        exp_name = "binary search"
        user_id = "123user"
        key = KEY

        with self.assertRaises(TypeError):
            SystemInterface.get_feedback_form(key, 
                                              lab_name, 
                                              exp_name,
                                              user_id)

    def test_get_feedback_form_with_auth_error(self):
        print "test_get_feedback_form_with_auth_error"

        lab_name = "Data Structures"
        exp_name = "binary search"
        user_id = "123user"
        key = "temp"

        with self.assertRaises(NotAuthorizedError):
            SystemInterface.get_feedback_form(key, 
                                              lab_name, 
                                              exp_name,
                                              user_id)

 #+END_SRC


** AddFeedback

#+NAME: class_add_feedback
#+begin_src python
    @staticmethod
    def add_feedback(data_dict):
        session_cls = System.delegate.entities['session']
        response_cls = System.delegate.entities['response']
        question_cls = System.delegate.entities['question']
        answer_cls = System.delegate.entities['answer']

        if len(data_dict['lab_name']) == 0:
            data_dict['lab_name'] = None

        responses = data_dict['responses']
        data_dict['responses'] = []
        data_dict['session'] = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        fb = None
        try:
            fb = System.do("add_feedback", **data_dict)

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        response_list = []
        try:
            for response in responses:
                question = question_cls(name=str(response['name']),
                                        question_type="")
                answers = response['answers']
                answer_list = []
                for answer in answers:
                    answer = answer_cls(name=str(answer))
                    answer_list.append(answer)
 
                res = response_cls(question=question, answers=answer_list,
                                    feedbacks=[fb])
                response_list.append(res)

            feedback = System.do("add_responses_to_feedback",
                                    responses=response_list,
                                    fb_id=int(fb.id),
                                    session=data_dict['session'])
            return feedback
        except Exception as e:
            fb.delete()
            current_app.logger.error("Exception = %s" % str(e))
            raise e

#+end_src

*** TestAddFeedback
 #+NAME: test_class_add_feedback
 #+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback_in_system_interface(self):
        print "test_add_feedback_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'exp_name': 'tuples',
                    'key' : KEY,
                    'gateway_ip': '10.4.12.24',
                    'responses': [{'name': 'How is your breakfast?',
                                    'answers':['yes', 'no'] }]
                   }

        fb = SystemInterface.add_feedback(data_dict)
        feedback_cls = System.delegate.entities['feedback']
        fb = feedback_cls.get_all()[0]
        
        self.assertEqual(fb.get("lab_name"), data_dict['lab_name'])
        self.assertEqual(fb.get("exp_name"), data_dict['exp_name'])
        self.assertEqual(fb.get("gateway_ip"), data_dict['gateway_ip'])
        self.assertEqual(fb.get("responses")[0].get("question").get("name"),
                             'How is your breakfast?')


    def test_add_feedback_with_saved_answers_in_system_interface(self):
        print "test_add_feedback_with_saved_answers_in_system_interface"


        answer_cls = System.delegate.entities['answer']
        answer = answer_cls(name='yes')
        answer.save()
        data_dict = {'lab_name': 'data structure',
                    'exp_name': 'tuples',
                    'key' : KEY,
                    'gateway_ip': '10.4.12.24',
                    'responses': [{'name': 'How is your breakfast?',
                                    'answers':['yes', 'no'] }]
                   }

        fb = SystemInterface.add_feedback(data_dict)

        data_dict1 = {'lab_name': "Automata",
            'exp_name': "DFA",
            'key' : KEY,
            'gateway_ip': 'X.X.X.X',
            'responses': [{'name': 'How is your breakfast?',
                            'answers':['yes', 'no'] }]
           }

        fb = SystemInterface.add_feedback(data_dict1)
        
        feedback_cls = System.delegate.entities['feedback']
        response_cls = System.delegate.entities['response']
        fb = feedback_cls.get_by_id(2)
        
        
        self.assertEqual(2, len(feedback_cls.get_all()))
        self.assertEqual(1, len(response_cls.get_all()))
        self.assertEqual(fb.get("lab_name"), data_dict1['lab_name'])
        self.assertEqual(fb.get("exp_name"), data_dict1['exp_name'])
        self.assertEqual(fb.get("gateway_ip"), data_dict1['gateway_ip'])
        self.assertEqual(fb.get("responses")[0].get("question").get("name"),
                             'How is your breakfast?')


    def test_add_feedback_raises_type_error_in_system_interface(self):
        print "test_add_feedback_raises_type_error_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'exp_name': 'tuples',
                    'key' : KEY,
                    'gateway_ip': '10.4.12.24',
                    'responses': "hello"
                   }

        with self.assertRaises(TypeError):
            SystemInterface.add_feedback(data_dict)

 #+END_SRC


** GetFeedbackUsage

#+NAME: class_si_get_feedback_usage
#+begin_src python
    @staticmethod
    def get_feedback_usage(gateway_ip, new_date, key):
        try:
            session_cls = System.delegate.entities['session']
            session = session_cls(key=str(key))
        except Exception as e:
            print str(e)
        date = datetime.datetime.strptime(new_date, "%d-%m-%Y").date()
        gateway_ip = str(gateway_ip)
        try:
            usage = System.do("get_feedback_usage",
                                     gateway_ip=gateway_ip,
                                     date=date,
                                     session=session)
            return usage
        except Exception as e:
            print str(e)

#+end_src


*** TestGetFeedbackUsage
 #+NAME: test_class_si_get_feedback_usage
 #+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_feedback_usage_in_system_interface(self):
        print "test_get_feedback_usage_in_system_interface"


        data_dict = {'lab_name': 'data structure',
                    'exp_name': 'tuples',
                    'key' : KEY,
                    'gateway_ip': '10.4.12.24',
                    'responses': [{'name': 'How is your breakfast?',
                                    'answers':['yes', 'no'] }]
                   }

        feedback = SystemInterface.add_feedback(data_dict)

        date_obj = datetime.datetime.now().date()
        date = date_obj.strftime('%d-%m-%Y')

        gateway_ip = "10.4.12.24"
        key = KEY
        usage = SystemInterface.get_feedback_usage(gateway_ip, date, key)
        self.assertEqual(usage, 1)

 #+END_SRC


** GetFeedbackDump

#+NAME: class_si_get_feedback_dump
#+begin_src python
    @staticmethod
    def get_feedback_dump(new_date, key):
        try:
            session_cls = System.delegate.entities['session']
            session = session_cls(key=str(key))
        except Exception as e:
            print str(e)
        date = datetime.datetime.strptime(new_date, "%d-%m-%Y").date()
        try:
            feedbacks = System.do("get_feedback_dump",
                                     date=date,
                                     session=session)
            return feedbacks
        except Exception as e:
            print str(e)

#+end_src


*** TestGetFeedbackDump
 #+NAME: test_class_si_get_feedback_dump
 #+BEGIN_SRC python
class TestGetFeedbackDump(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        q_type = "radio"
        question_cls = System.delegate.entities['question']
        question1 = question_cls(name="How is your breakfast?", 
                                  question_type=q_type)
        question2 = question_cls(name="How is your lunch?", 
                                 question_type=q_type)
        question3 = question_cls(name="How is your dinner?", 
                                 question_type=q_type)

        question1.save()
        question2.save()
        question3.save()


    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_feedback_dump_in_system_interface(self):
        print "test_get_feedback_dump_in_system_interface"

        data_dict = {'lab_name': 'data structure',
                    'exp_name': 'tuples',
                    'key' : KEY,
                    'gateway_ip': '10.4.12.24',
                    'responses': [{'name': 'How is your breakfast?',
                                    'answers':['yes', 'no'] }]
                   }

        feedback = SystemInterface.add_feedback(data_dict)

        date_obj = datetime.datetime.now().date()
        date = date_obj.strftime('%d-%m-%Y')

        key = KEY

        feedbacks = SystemInterface.get_feedback_dump(date, key)
        date_1 = datetime.datetime.strptime(date, "%d-%m-%Y").date()

        self.assertEqual(feedbacks[0].date, date_1)

 #+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>
<<get_feedback_form>>
<<class_add_feedback>>
<<class_si_get_feedback_usage>>
<<class_si_get_feedback_dump>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>
<<test_class_get_feedback_form>>
<<test_class_add_feedback>>
<<test_class_si_get_feedback_usage>>
<<test_class_si_get_feedback_dump>>
<<run_test_cases>>
#+end_src
