#+TITLE: System implementation for OutReach Portal 3.0
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Initialize database for tests
  Before any test is run, the database is populated with two roles and one user
  whose role is admin.
#+NAME: populate_db
#+BEGIN_SRC python
def populate_db():
    admin_role = Role(name="admin", centre_oc=None, centre_nc=None)
    guest_role = Role(name="guest", centre_oc=None, centre_nc=None)
    noc_role = Role(name="noc", centre_oc=None, centre_nc=None)
    reviewer_role = Role(name="reviewer", centre_oc=None, centre_nc=None)
    admin_role.save()
    guest_role.save()
    reviewer_role.save()
    noc_role.save()
    
    admin_name = Name(name=Config.admin_name)
    admin_email = Email(email=Config.admin_email)
    admin_name.save()
    admin_email.save()
    user = User(name=admin_name,
                            email=admin_email,
                            roles=[admin_role, guest_role])
    user.save()

    pending = Status(name="pending")
    pending.save()
    cancelled = Status(name="cancelled")
    cancelled.save()
    completed = Status(name="completed")
    completed.save()
    pending_approval = Status(name="pending for approval")
    pending_approval.save()
    rejected = Status(name="rejected")
    rejected.save()
    approved = Status(name="approved")
    approved.save()

#+END_SRC

* Test Constructor
#+NAME: test_persistent_system_constructor
#+BEGIN_SRC python
class TestSystemConstructor(TestCase):

    persistent_delegate = None

    def initialize_role_set(self):
        self.admin_role = Role(name="admin", centre_oc=None, centre_nc=None)
        self.guest_role = Role(name="guest", centre_oc=None, centre_nc=None)
        self.noc_role = Role(name="noc", centre_oc=None, centre_nc=None)
        self.reviewer_role = Role(name="reviewer", centre_oc=None, centre_nc=None)
        self.admin_role.save()
        self.guest_role.save()
        self.reviewer_role.save()
        self.noc_role.save()
        return Role.query.all()

    def initialize_user_set(self):
        admin_name = Name(name=Config.admin_name)
        admin_email = Email(email=Config.admin_email)
        admin_name.save()
        admin_email.save()
        role_admin = Role.get_by_id(1)
        role_guest = Role.get_by_id(2)
        self.admin_user = User(name=admin_name,
                          email=admin_email,
                          roles=[role_admin, role_guest], user_status="active")
        self.admin_user.save()
        return User.get_all()

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()
        self.initialize_role_set()
        self.initialize_user_set()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

   
    def test_system_constructor(self):
        print "test_system_constructor"
        self.assertEqual(System.delegate.user_set[0].get("name").get("name"),
                         Config.admin_name)
        self.assertEqual(System.delegate.user_set[0].get("email").get("email"),
                         "app-admin@vlabs.ac.in")
        self.assertEqual(System.delegate.user_set[0].get('roles')[0].get('name'),
                         "admin")

    def test_is_session_admin(self):
        print "test_is_session_admin"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.admin)
        System.session_set.append(session)
        self.assertEqual(System.is_session_admin(session), True)

    def test_is_session_OC(self):
        print "test_is_session_OCC"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,
                          role=Role(name="OCC",centre_oc=None,centre_nc=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_OCC(session), True)

    def test_is_session_NCC(self):
        print "test_is_session_NCC"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,
                          role=Role(name="NCC",centre_oc=None,centre_nc=None))
        System.session_set.append(session)
        self.assertEqual(System.is_session_NCC(session), True)

    def test_is_session_reviewer(self):
        print "test_is_session_reviewer"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.reviewer)
        System.session_set.append(session)
        self.assertEqual(System.is_session_reviewer(session), True)

    def test_is_session_guest(self):
        print "test_is_session_guest"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.guest)
        System.session_set.append(session)
        self.assertEqual(System.is_session_guest(session), True)

    def test_is_session_noc(self):
        print "test_is_session_noc"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user,role=Role.noc)
        System.session_set.append(session)
        self.assertEqual(System.is_session_noc(session), True)

    def test_session_exists(self):
        print "test_session_exists"
        admin_user=System.delegate.user_set[0]
        session = Session(user=admin_user, role=Role.admin)
        System.session_set.append(session)
        self.assertEqual(System.session_exists(session), True)

#+END_SRC

* Test Arity and Type Checks
#+NAME: test_arity_and_types
#+BEGIN_SRC python
class TestSystemArityAndType(TestCase):
    TESTING = True

    def setUp(self):
        System.initialize_system(ObjectDelegate)

    def tearDown(self):
        System.delegate = None

    def test_arity(self):
        print "test_arity"
        with self.assertRaises(ArityError):
            System.arity_check([1,2], 3)

    def test_type_checks(self):
        print "test_type_checks"
        args = {"name": Name(name="Jimi Hendrix"),
                "email": Name(name="Jimi Hendrix")
                }

        arg_types = {"name": is_name,
                     "email": is_email
                     }

        with self.assertRaises(TypeError):
            System.type_check(args, arg_types)

#+END_SRC

* Test AddQuestion
#+NAME: test_add_question
#+BEGIN_SRC python
class TestAddQuestion(TestCase):
    TESTING = True
    persistent_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

    def test_add_question(self):
        print "test_add_question_in_system_persistence"
        name="how are labs?"
        radio="radio"
        key = Config.key
        question = Question(name=name, question_type=radio)
        question1 = System.do("add_question", question=question,
                                  key=key)
        new_question = Question.get_by_id(1)
        self.assertEqual(new_question.get("name"), name)
            
#+END_SRC

* Test AddAnswer
#+NAME: test_add_answer
#+BEGIN_SRC python
class TestAddAnswer(TestCase):
    TESTING = True
    persistent_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

    def test_add_answer(self):
        print "test_add_answer_in_system_persistence"
        ans = "excellent labs"
        answer = Answer(name=ans)
        key = Config.key
        answer = System.do("add_answer", answer=answer, key=key)
        answer1 = Answer.get_by_id(1)
        self.assertEqual(answer1.get("name"), ans)
            
#+END_SRC

* Test AddFeedback
#+NAME: test_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    persistent_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

    def test_add_feedback(self):
        print "test_add_feedback_in_system_persistence"
        gateway_ip = "10.100.40.2"
        lab_id = "cse01"
        exp_id = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        key = Config.key
        feedback = System.do("add_feedback", gateway_ip=gateway_ip,
                                 lab_id=lab_id, exp_id=exp_id,
                                 date=date, key=key)
        fb = Feedback.get_by_id(1)
        self.assertEqual(fb.get("gateway_ip"), gateway_ip)
        self.assertEqual(fb.get("lab_id"), lab_id)
        self.assertEqual(fb.get("exp_id"), exp_id)
        self.assertEqual(fb.get("responses"), [])
            
#+END_SRC

* Test AddResponse
#+NAME: test_add_response
#+BEGIN_SRC python
class TestAddResponse(TestCase):
    TESTING = True
    persistent_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistent_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistent_delegate = None

    def test_add_response(self):
        print "test_add_response_in_system_persistence"
        name = "how are labs?"
        q_type = "radio"
        question1 = Question(name=name, question_type=q_type)
        question1.save()

        ans = "excellent labs"
        answer1 = Answer(name=ans)
        answer1.save()

        gateway_ip = "10.100.40.2"
        lab_id = "cse01"
        exp_id = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()

        fb = Feedback(gateway_ip=gateway_ip,
                      lab_id=lab_id,
                      exp_id=exp_id,
                      date=date,
                      responses=[])
        fb.save()

        res = Response(question=question1, answer=answer1, feedback=fb)
        key = Config.key
        response1 = System.do("add_response", response=res,
                                  key=key)

        response = Response.get_by_id(1)

        self.assertEqual(response.get("question").get("name"),\
                         question1.get("name"))

        self.assertEqual(response.get("answer").get("name"),\
                         answer1.get("name"))
            
#+END_SRC

* Infra                                                         :boilerplate:

** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
#from runtime.utils.class_persistence_template import *
from runtime.rest.app import create_app
#from sqlalchemy.exc import IntegrityError
from runtime.system.persistent_delegates import *

from runtime.system.system import *
from runtime.system.populate_db import *
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

* Tangling                                                      :boilerplate:

** source
#+BEGIN_SRC python :tangle populate_db.py :eval no :noweb yes
<<populate_db>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_persistent_system.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
<<test_add_question>>
<<test_add_answer>>
<<test_add_feedback>>
<<test_add_response>>
<<run_test_cases>>
#+end_src
