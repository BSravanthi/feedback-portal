#+TITLE: Test System with Persistence
#+AUTHOR: VLEAD
#+DATE: [2016-06-07 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Initialize database for tests
  Before any test is run, the database is populated with two roles and one user
  whose role is admin.
#+NAME: populate_db
#+BEGIN_SRC python
def populate_db():
    pass
#+END_SRC


* Test AddQuestion
#+NAME: test_add_question
#+BEGIN_SRC python
class TestAddQuestion(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistence_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_add_question(self):
        print "test_add_question_in_system_persistence"
        name="how are labs?"
        radio="radio"
        key = KEY
        session = Session(key=key)
        question = Question(name=name, question_type=radio)
        question1 = System.do("add_question", question=question,
                                  session=session)
        new_question = Question.get_by_id(1)
        self.assertEqual(new_question.get("name"), name)
            
#+END_SRC


* Test AddAnswer
#+NAME: test_add_answer
#+BEGIN_SRC python
class TestAddAnswer(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistence_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_add_answer(self):
        print "test_add_answer_in_system_persistence"
        ans = "excellent labs"
        answer = Answer(name=ans)
        key = KEY
        session = Session(key=key)
        answer = System.do("add_answer", answer=answer, session=session)
        answer1 = Answer.get_by_id(1)
        self.assertEqual(answer1.get("name"), ans)
            
#+END_SRC


* Test AddFeedback
#+NAME: test_add_feedback
#+BEGIN_SRC python
class TestAddFeedback(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_add_feedback(self):
        print "test_add_feedback_in_system_persistence"
        gateway_ip = "10.100.40.2"
        lab_name = "cse01"
        exp_name = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        key = KEY
        session = Session(key=key)
        feedback = System.do("add_feedback", gateway_ip=gateway_ip,
                                 lab_name=lab_name, exp_name=exp_name,
                                 date=date, responses=[],
                                 session=session)
        
        fb = Feedback.get_by_id(1)
        self.assertEqual(fb.get("gateway_ip"), gateway_ip)
        self.assertEqual(fb.get("lab_name"), lab_name)
        self.assertEqual(fb.get("exp_name"), exp_name)
        self.assertEqual(fb.get("responses"), [])
            
#+END_SRC


* Test GetFeedbackUsage
#+NAME: test_get_feedback_usage
#+BEGIN_SRC python
class TestGetFeedbackUsage(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistence_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_get_feedback_usage(self):
        print "test_get_feedback_usage_in_system_persistence"
        gateway_ip = "10.100.40.2"
        lab_name = "cse01"
        exp_name = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        key = KEY
        session = Session(key=key)
        feedback = System.do("add_feedback", gateway_ip=gateway_ip,
                                 lab_name=lab_name, exp_name=exp_name,
                                 date=date, responses=[],
                                 session=session)

        feedback_usage = System.do("get_feedback_usage",
                                       gateway_ip=gateway_ip, 
                                       date=date, 
                                       session=session)
        
        self.assertEqual(feedback_usage, 1)
            
#+END_SRC


* Test GetFeedbackDump
#+NAME: test_get_feedback_dump
#+BEGIN_SRC python
class TestGetFeedbackDump(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistence_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_get_feedback_dump(self):
        print "test_get_feedback_dump_in_system_persistence"
        gateway_ip = "10.100.40.2"
        lab_name = "cse01"
        exp_name = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()
        key = KEY
        session = Session(key=key)
        feedback = System.do("add_feedback", gateway_ip=gateway_ip,
                                 lab_name=lab_name, exp_name=exp_name,
                                 date=date, responses=[],
                                 session=session)

        feedbacks = System.do("get_feedback_dump", date=date, session=session)
        self.assertEqual(feedbacks[0].date, date)
            
#+END_SRC


* Test AddResponsesToFeedback
#+NAME: test_add_responses_to_feedback
#+BEGIN_SRC python
class TestAddResponsesToFeedback(TestCase):
    TESTING = True
    persistence_delegate = None

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()
        System.initialize_system(PersistenceDelegate)
        self.persistence_delegate = PersistenceDelegate()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

    def test_add_responses_to_feedback(self):
        print "test_add_responses_to_feedback_in_system_persistence"
        name = "how are labs?"
        q_type = "radio"
        question1 = Question(name=name, question_type=q_type)
        question1.save()

        ans = "excellent labs"
        answer1 = Answer(name=ans)
        answer1.save()

        gateway_ip = "10.100.40.2"
        lab_name = "cse01"
        exp_name = "data01"
        date = datetime.datetime.strptime("30-06-2016", "%d-%m-%Y").date()

        fb = Feedback(gateway_ip=gateway_ip,
                      lab_name=lab_name,
                      exp_name=exp_name,
                      date=date,
                      responses=[])
        fb.save()

        res = Response(question=question1, answers=[answer1], feedbacks=[fb])
        key = KEY
        session = Session(key=key)
        fb1 = System.do("add_responses_to_feedback", responses=[res],
                                  fb_id=1,
                                  session=session)

        feedback = Feedback.get_by_id(1)

        self.assertEqual(feedback.get("lab_name"), lab_name)
        self.assertEqual(feedback.get("responses")[0].get("question").\
                             get("name"), question1.get("name"))
        self.assertEqual(feedback.get("responses")[0].get("answers")[0].\
                             get("name"), answer1.get("name"))

#+END_SRC


* Infra                                                         :boilerplate:
** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.persistence_delegate import *
from runtime.system.system import *
from runtime.system.populate_db import *
from runtime.config.system_config import KEY

config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:

** source
#+BEGIN_SRC python :tangle populate_db.py :eval no :noweb yes
<<populate_db>>
#+END_SRC
** tests
#+BEGIN_SRC python :tangle test_persistence_system.py :eval no :noweb yes
<<imports_for_tests>>
<<populate_db>>
<<test_add_question>>
<<test_add_answer>>
<<test_add_feedback>>
<<test_get_feedback_usage>>
<<test_get_feedback_dump>>
<<test_add_responses_to_feedback>>
<<run_test_cases>>
#+end_src
